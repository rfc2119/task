version: '3'

includes:
  docs:
    taskfile: ./docs
    dir: ./docs

vars:
  PROJECT_TYPE: golang
  GIT_COMMIT:
    sh: git log -n 1 --format=%h

  GO_PACKAGES:
    sh: go list ./...

env:
  CGO_ENABLED: '0'

tasks:
  default:
    cmds:
      - task: test

  install:
    desc: Installs Task
    cmds:
      - go install -v -ldflags="-w -s -X main.version={{.GIT_COMMIT}}" ./cmd/task

  mod:
    alias: moddddd
    when: false
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  cli-deps:
    desc: Downloads CLI dependencies
    cmds:
      - task: go-get
        vars: {REPO: golang.org/x/lint/golint}
      - task: go-get
        vars: {REPO: github.com/goreleaser/goreleaser}
      - task: go-get
        vars: {REPO: github.com/goreleaser/godownloader}

  clean:
    desc: Cleans temp files and folders
    cmds:
      - rm -rf dist/

  lint:
    desc: Runs golint
    log:
      error: 'Log message that shows up if the cmds return exit code 0'
      start: 'Log message to show before Go starts running the task logic (including env scripts)'
      success: 'Log message to show if the cmds return exit code 1 or greater'
    cmds:
      - golint {{catLines .GO_PACKAGES}}
    silent: true

  test:
    desc: Runs test suite
    alias: gotest
    hide: '{{if eq .PROJECT_TYPE "golang"}} false {{else}} true {{end}}'
    summary: |
      # Runs the Go Tests

      This, this, and that.

      * List
      * Another item

      1. Another list
      2. Tada [Google](https://www.google.com)
    log:
      error: 'Log message that shows up if the cmds return exit code 0'
      start: 'Log message to show before Go starts running the task logic (including env scripts)'
      success: 'Log message to show if the cmds return exit code 1 or greater'
    deps: [install]
    cmds:
      - go test {{catLines .GO_PACKAGES}}
      - |
        if [ "$PATH" == 'example' ]; then
          if [ "$SOMETHING" == 'double' ]; then
            echo 'yo'
          fi
        fi

  test-release:
    desc: Tests release process without publishing
    cmds:
      - goreleaser --snapshot --rm-dist

  gen-install-script:
    desc: Generate install script using https://github.com/goreleaser/godownloader
    cmds:
      - godownloader --repo go-task/task -o install-task.sh
      - cp ./install-task.sh ./docs/install.sh

  ci:
    - task: go-get
      vars: {REPO: golang.org/x/lint/golint}
    - task: lint
    - task: test

  go-get: go get -u {{.REPO}}

  packages:
    cmds:
      - echo '{{.GO_PACKAGES}}'
    silent: true
